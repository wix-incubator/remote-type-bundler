// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Site SDK - Fixed versions Verify bookings output against snapshot 1`] = `
"type HostModule<T, H extends Host$1> = {
    __type: 'host';
    create(host: H): T;
};
type Host$1<Environment = unknown> = {
    channel: {
        observeState(callback: (props: unknown, environment: Environment) => unknown): {
            disconnect: () => void;
        } | Promise<{
            disconnect: () => void;
        }>;
    };
    environment?: Environment;
    /**
     * Optional bast url to use for API requests, for example \`www.wixapis.com\`
     */
    apiBaseUrl?: string;
};

declare global {
	// eslint-disable-next-line @typescript-eslint/consistent-type-definitions -- It has to be an \`interface\` so that it can be merged.
	interface SymbolConstructor {
		readonly observable: symbol;
	}
}

type WixNamespace = string;
interface Channel<Environment> {
    observeState(callback: (props: unknown, environment: Environment) => unknown): {
        disconnect: () => void;
    } | Promise<{
        disconnect: () => void;
    }>;
}
interface WebsiteChannel extends Channel<unknown> {
    invoke: (args: {
        namespace: WixNamespace;
        method: string;
        args: unknown[];
    }) => Promise<unknown>;
    getAccessToken: () => Promise<string>;
}
type Host<Environment = unknown> = {
    channel: WebsiteChannel;
    environment?: Environment;
    apiBaseUrl?: string;
};

/**
 * An object that contains address information.
 */
interface Address {
    /**
     * Full text address comprised of street name and number, city, subdivision, country, and postal code.
     * @requiredField formatted
     */
    formatted: string;
    /**
     * Address coordinates.
     * @requiredField location
     * @servicePath wix-bookings-frontend.AddressCoordinates
     */
    location: AddressCoordinates;
    /**
     * Address street address.
     * @requiredField streetAddress
     * @servicePath wix-bookings-frontend.StreetAddress
     */
    streetAddress: StreetAddress;
    /**
     * Address city.
     * @requiredField city
     */
    city: string;
    /**
     * Address subdivision, state, prefecture, or province.
     * @requiredField subdivision
     */
    subdivision: string;
    /**
     * Address country.
     * @requiredField country
     */
    country: string;
    /**
     * Address postal code.
     * @requiredField postalCode
     */
    postalCode: string;
}
/**
 * An object that contains the geographic coordinates of the address.
 */
interface AddressCoordinates {
    /**
     * Address latitude.
     * @requiredField latitude
     */
    latitude: number;
    /**
     * Address longitude.
     * @requiredField longitude
     */
    longitude: number;
}
/**
 * An object used when calling [\`getServiceAvailability()\`](#getServiceAvailability)
 *  containing options for which slots should be returned.
 */
interface AvailabilityOptions {
    /**
     * Start date and time of the slots
     *  to be returned. Defaults to the current date and time.
     */
    startDateTime?: Date;
    /**
     * End date and time of the slots to
     *  be returned. Defaults to one week from \`startDateTime\`, which is one week
     *  from the current date and time if \`startDateTime\` is also omitted.
     */
    endDateTime?: Date;
}
/**
 * An object used when calling [\`checkoutBooking()\`](#checkoutBooking)
 *  containing information about the slot to be booked.
 */
interface BookingInfo {
    /**
     * The slot to be booked.
     * @requiredField slot
     * @servicePath wix-bookings-frontend.Slot
     */
    slot: Slot;
    /**
     * List of form field values required to book the session.
     * @requiredField formFields
     * @servicePath wix-bookings-frontend.FormField
     */
    formFields: FormField[];
    /**
     * Number of spots to book. Defaults to \`1\`.
     */
    numberOfSpots?: number;
}
/**
 * An object representing the result of a call to [\`checkoutBooking()\`](#checkoutBooking).
 */
interface BookingResult {
    /**
     * ID of the booking that was checked out.
     * @requiredField bookingId
     */
    bookingId: string;
    /**
     * Status of the booking that was checked out.
     *  One of:
     *
     *  + \`"Confirmed"\`: Payment was successful or payment is to be done offline.
     *  + \`"Pending Payment"\`: Payment is pending.
     *  + \`"Terminated"\`: Payment failed or was cancelled.
     * @requiredField status
     */
    status: string;
}
/**
 * An object describing the business location.
 */
interface BusinessLocation {
    /**
     * Business location ID.
     * @requiredField id
     */
    id: string;
    /**
     * Business location name.
     * @requiredField name
     */
    name: string;
    /**
     * Business location description.
     * @requiredField description
     */
    description: string;
    /**
     * An object describing the address.
     * @requiredField address
     * @servicePath wix-bookings-frontend.Address
     */
    address: Address;
}
/**
 * An object returned after calling [\`getCheckoutOptions()\`](#getCheckoutOptions)
 *  containing information about the available payment options for the service and the logged-in user.
 */
interface CheckoutOption {
    /**
     * Type of the available payment option. Valid options are:
     *
     *  + \`"wixPay_Online"\` for online collections
     *  + \`"wixPay_Offline"\` for offline collections
     *  + \`"package"\` for a package-type pricing plan
     *  + \`"membership"\` for a membership-type pricing plan
     * @requiredField type
     */
    type: string;
    /**
     * Name of the plan package or membership. For booking with pricing plans only.
     */
    planName?: string;
    /**
     * Order ID of the plan package or membership. For booking with pricing plans only.
     */
    planOrderId?: string;
    /**
     * ID of the benefit provided by the plan package. For booking with package-type pricing plans only.
     */
    benefitId?: string;
    /**
     * Number of sessions remaining in the plan package. For booking with package-type pricing plans only.
     */
    remainingCredits?: number;
    /**
     * Number of sessions initially provided with the plan package.  For booking with package-type pricing plans only.
     */
    totalCredits?: number;
    /**
     * Date by which the plan package or membership expires. For booking with pricing plans only.
     */
    planExpiration?: Date;
}
/**
 * An object used to request checkout options for the service. Currently, you can request the checkout options using the ID of a slot.
 */
interface CheckoutOptionOptions {
    /**
     * Unique slot identifier.
     * @requiredField slotId
     */
    slotId: string;
    /**
     * User ID for the customer making the booking. Used for retrieving valid payment plans for the customer for the selected slot.
     * @requiredField userId
     */
    userId: string;
}
/**
 * An object that defines a booking window for limiting when a member can book a slot. For example,
 *  you can prevent members from booking a service too far in advance, because perhaps the service might
 *  be discontinued by then. Or, you can prevent members from booking a service right before it starts, as
 *  this would make it hard to schedule resources.
 */
interface Constraints {
    /**
     * Date from which a member is allowed to book a slot.
     * @requiredField bookableFrom
     */
    bookableFrom: Date;
    /**
     * Date until which a member is allowed to book a slot.
     * @requiredField bookableUntil
     */
    bookableUntil: Date;
}
/**
 * An object used when calling [\`checkoutBooking()\`](#checkoutBooking)
 *  containing values for form fields required to book the session.
 */
interface FormField {
    /**
     * ID of the form field from the **form** property in the **Booking/Services** collection.
     * @requiredField _id
     */
    _id: string;
    /**
     * Form field value.
     * @requiredField value
     */
    value: string;
}
/**
 * The location where a service is offered.
 */
interface Location {
    /**
     * Location type. Valid options are:
     * - \`"OWNER_BUSINESS"\` The business address set by the owner. This type is set when choosing **Business Address** in the Service Details page of the dashboard, and populates the businessLocation object.
     * - \`"OWNER_CUSTOM"\` A custom address set by the owner. This type is set when choosing **Custom Location** in the Service Details page of the dashboard, and populates the \`locationText\` property.
     * - \`"CUSTOM"\` An address set for the individual booking, usually chosen by the customer and entered in the booking form.
     * @requiredField type
     */
    type: string;
    /**
     * Text describing the location.
     * @requiredField locationText
     */
    locationText: string;
    /**
     * An object describing the business location.
     * @requiredField businessLocation
     * @servicePath wix-bookings-frontend.BusinessLocation
     */
    businessLocation: BusinessLocation;
}
/**
 * An object used when calling [\`checkoutBooking()\`](#checkoutBooking)
 *  containing information about the payment options.
 */
interface PaymentOptions {
    /**
     * Type of payment. Valid options are:
     *
     *   + \`"wixPay_Online"\` for online collections
     *   + \`"wixPay_Offline"\` for offline collections
     *   + \`"package"\` for a package-type pricing plan
     *   + \`"membership"\` for a membership-type pricing plan
     * @requiredField paymentType
     */
    paymentType: string;
    /**
     * A coupon code to be used with the payment.
     */
    couponCode?: string;
}
/**
 * An object returned from [\`getServiceAvailability()\`](#getServiceAvailability)
 *  containing the available bookings slots.
 */
interface ServiceAvailability {
    /**
     * List of the available slots.
     *
     * Max: 500 slots
     * @requiredField slots
     * @servicePath wix-bookings-frontend.Slot
     */
    slots: Slot[];
}
/**
 * An object representing a booking slot.
 */
interface Slot {
    /**
     * Unique slot identifier.
     * @requiredField _id
     */
    _id: string;
    /**
     * Starting date and time of the slot.
     * @requiredField startDateTime
     */
    startDateTime: Date;
    /**
     * Ending date and time of the slot.
     * @requiredField endDateTime
     */
    endDateTime: Date;
    /**
     * ID of the service that the slot belongs to.
     * @requiredField serviceId
     */
    serviceId: string;
    /**
     * Maximum number of participants that can book the service for this slot.
     * @requiredField capacity
     */
    capacity: number;
    /**
     * Number of remaining spots that can be booked for the slot.
     * @requiredField remainingSpots
     */
    remainingSpots: number;
    /**
     * ID of the slot's staff member.
     * @requiredField staffMemberId
     */
    staffMemberId: string;
    /**
     * The location where this slot is offered.
     * @requiredField location
     * @servicePath wix-bookings-frontend.Location
     */
    location: Location;
    /**
     * Whether the slot can be booked right now, meaning today's date is within the booking window defined by \`constraints\`.
     * @requiredField bookable
     */
    bookable: boolean;
    /**
     * The dates between which the slot can be booked. The constraints define the booking window. The booking window prevents site members from booking way in advance or just right before the slot starts.
     * @requiredField constraints
     * @servicePath wix-bookings-frontend.Constraints
     */
    constraints: Constraints;
}
/**
 * An object representing information about the street name and street number of an address.
 */
interface StreetAddress {
    /**
     * Address street name.
     * @requiredField name
     */
    name: string;
    /**
     * Address street number.
     * @requiredField number
     */
    number: string;
}

/**
 * Books a service and processes payment for the service.
 *
 * The \`checkoutBooking()\` function returns a Promise that resolves to a
 *  unique booking ID when the service is booked successfully.
 *
 *  To understand how \`checkoutBooking()\` is used in a typical booking lifecycle,
 *  see [Typical Booking Lifecycle](bookings/sample-flow).
 *
 *  Call the \`checkoutBooking()\` with a \`BookingInfo\` object that
 *  contains the slot to book, values for all the form fields, and
 *  the number of spots to book.
 *
 *  The form fields contain additional information required for the booking.
 *
 *  If the service being checked out is not a free service, you also need to pass
 *  a \`PaymentOptions\` object containing information about the
 *  method of payment and any coupon codes. If an online method of payment is specified,
 *  a payment popup is presented for the user to input payment information, such
 *  as credit card information. The function's returned Promise resolves after the
 *  user finishes entering the payment information and the service has been successfully
 *  booked. If no payment or an offline method of payment is specified, the payment
 *  popup is not presented and the Promise resolves when the service has been
 *  successfully booked.
 *
 *  If a service is configured as a paid service in the **Dashboard**, attempting
 *  to perform a checkout as if it is a free service results in an error.
 *
 *  When a service is booked successfully:
 *
 *  + A site contact is automatically [created or appended](https://dev.wix.com/docs/velo/api-reference/wix-crm-frontend/contacts/append-or-create-contact) with the provided booking information.
 *  + An email is sent to you about the new booking.
 *  + An email is sent to the user confirming that the service was booked.
 *
 *
 * > **Note:**
 * To use \`checkoutBooking()\` you need to [upgrade to a Business Premium Plan](https://support.wix.com/en/article/upgrading-wix-bookings).
 * @param bookingInfo - Information about the slot to be booked.
 * @requiredField bookingInfo
 * @servicePath wix-bookings-frontend.BookingInfo
 * @param options - Information about the payment method and coupon codes.
 * @servicePath wix-bookings-frontend.PaymentOptions
 * @returns Fulfilled - Results of the booking checkout.
 * @servicePath wix-bookings-frontend.BookingResult
 */
declare async function checkoutBooking(bookingInfo: BookingInfo, options?: PaymentOptions): Promise<BookingResult>;
/**
 * Gets the valid checkout options for a service's slot.
 *
 * The \`getCheckoutOptions()\` function returns a Promise that resolves to the valid checkout options for the given service's slot.
 *
 *  To understand how \`getCheckoutOptions()\` is used in a typical booking lifecycle,
 *  see [Typical Booking Lifecycle](bookings/sample-flow).
 *
 *  The passed \`checkoutOptionOptions\` object contains the slot ID for the service. Typically, you retrieve the slot ID with the [\`getServiceAvailability()\`](#getServiceAvailability)
 *  function.
 *
 *  \`getCheckoutOptions()\` returns the options available for the specified user. For example, if the user has not
 *  purchased any pricing plans, pricing plans are not returned even if there are pricing plans associated with the service.
 * @param checkoutOptionOptions - An object containing the information needed to identify the service for which to list the possible checkout options. Currently, you can request the checkout options using the ID of a slot.
 * @requiredField checkoutOptionOptions
 * @servicePath wix-bookings-frontend.CheckoutOptionOptions
 * @returns Fulfilled - The available payment options for the service and the logged-in user.
 * Rejected - Checkout payment options error object.
 * @servicePath wix-bookings-frontend.CheckoutOption
 */
declare async function getCheckoutOptions(checkoutOptionOptions: CheckoutOptionOptions): Promise<CheckoutOption[]>;
/**
 * Gets the available slots for a specific service.
 *
 * The \`getServiceAvailability()\` function returns a Promise that resolves to a
 *  list of slots from the given service that have open spots, and can therefore
 *  still be booked. If the service is offered in multiple locations, a slot is returned for each location.
 *
 * > **Note:** \`location\` in the slot object is not yet available to all users.
 *
 *  Service availability means different things for the different [service types](https://support.wix.com/en/article/creating-the-right-booking-service-for-your-business):
 *
 *  + **Appointments**: See [here](https://support.wix.com/en/article/setting-availability-for-appointments-in-wix-bookings) to
 *    understand what affects the availability of an appointment. An
 *    appointment is returned as available if it meets the conditions outlined in the
 *    article linked above and the appointment slot's time falls within the time specified by the
 *    \`AvailabilityOptions\` or within the default time frame if no options are specified.
 *  + **Classes**: A class slot is returned as available if the slot's
 *    time falls within the time specified by the \`AvailabilityOptions\` or within
 *    the default time frame if no options are specified.
 *  + **Courses**: The first session slot from a set of course sessions is returned
 *    as available if the first course slot's time falls within the time specified by the
 *    \`AvailabilityOptions\` or within the default time frame if no options are specified.
 *
 *  To understand how \`getServiceAvailability()\` is used in a typical booking lifecycle,
 *  see [Typical Booking Lifecycle](bookings/sample-flow).
 *
 *  The passed \`serviceId\` must be an ID from your site's **Bookings/Services**
 *  collection. Typically, you retrieve the ID from from the collection using a
 *  query or through a dataset.
 *
 *  Optionally, you can pass an \`AvailabilityOptions\`
 *  object that defines a date range for which slots should be returned. If you
 *  do not pass an an \`AvailabilityOptions\` object, the
 *  default date range is from the date and time the function is called until one
 *  week later.
 * @param serviceId - The ID of the service for which to check slot availability.
 * @requiredField serviceId
 * @param options - Options that refine which slots should be returned.
 * @servicePath wix-bookings-frontend.AvailabilityOptions
 * @returns Fulfilled - A list of available slots.
 * Rejected - Bookings error object.
 * @servicePath wix-bookings-frontend.ServiceAvailability
 */
declare async function getServiceAvailability(serviceId: string, options?: AvailabilityOptions): Promise<ServiceAvailability>;

declare const bookingsSdkModuleContext_checkoutBooking: typeof checkoutBooking;
declare const bookingsSdkModuleContext_getCheckoutOptions: typeof getCheckoutOptions;
declare const bookingsSdkModuleContext_getServiceAvailability: typeof getServiceAvailability;
declare namespace bookingsSdkModuleContext {
  export { bookingsSdkModuleContext_checkoutBooking as checkoutBooking, bookingsSdkModuleContext_getCheckoutOptions as getCheckoutOptions, bookingsSdkModuleContext_getServiceAvailability as getServiceAvailability };
}

type Methods$1<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const bookingsRuntime: Methods$1<typeof bookingsSdkModuleContext> & HostModule<Methods$1<typeof bookingsSdkModuleContext>, Host>;

declare namespace wixSitebookings {
  export { bookingsRuntime as bookings };
}

type Methods<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const bookingsContext: Methods<typeof bookingsSdkModuleContext>;

declare namespace wixSitebookingsContext {
  export { bookingsContext as bookings };
}

declare module "@wix/site-bookings" {
     export = wixSitebookings;
}
 
declare module "@wix/site-bookings/context" {
     export = wixSitebookingsContext;
}
"
`;

exports[`Site SDK - Fixed versions Verify site-location output against snapshot 1`] = `
"type HostModule<T, H extends Host$1> = {
    __type: 'host';
    create(host: H): T;
};
type Host$1<Environment = unknown> = {
    channel: {
        observeState(callback: (props: unknown, environment: Environment) => unknown): {
            disconnect: () => void;
        } | Promise<{
            disconnect: () => void;
        }>;
    };
    environment?: Environment;
    /**
     * Optional bast url to use for API requests, for example \`www.wixapis.com\`
     */
    apiBaseUrl?: string;
};

declare global {
	// eslint-disable-next-line @typescript-eslint/consistent-type-definitions -- It has to be an \`interface\` so that it can be merged.
	interface SymbolConstructor {
		readonly observable: symbol;
	}
}

type WixNamespace = string;
interface Channel<Environment> {
    observeState(callback: (props: unknown, environment: Environment) => unknown): {
        disconnect: () => void;
    } | Promise<{
        disconnect: () => void;
    }>;
}
interface WebsiteChannel extends Channel<unknown> {
    invoke: (args: {
        namespace: WixNamespace;
        method: string;
        args: unknown[];
    }) => Promise<unknown>;
    getAccessToken: () => Promise<string>;
}
type Host<Environment = unknown> = {
    channel: WebsiteChannel;
    environment?: Environment;
    apiBaseUrl?: string;
};

/**
 * An object used to manage the query segment of the current page's URL.
 * * Get hands-on experience with the URL query parameters on our [Hello Query Parameters](https://www.wix.com/velo/example/hello-query-parameters) example page.
 */
interface QueryParams {
    /**
     * Adds query parameters to the current page's URL.
     *
     * Adds one or more query parameters to the current page's URL.
     *
     *  The \`add()\` function can only be used when browser
     *  [rendering](https://support.wix.com/en/article/velo-about-the-page-rendering-process) happens,
     *  meaning you can only use it in frontend code after the page is ready.
     *
     *  If a specified key already exists as a query parameter, the
     *  newly specified value will overwrite the key's previous value.
     *
     *  Calling the \`add()\` function triggers the [\`onChange()\`](location.html#onChange)
     *  event handler if it has been registered.
     *  > **Note:** To retrieve the page's current query parameters, use the
     *  [\`query\`](location.html#query) property.
     * @param toAdd - An object containing a key:value pair
     *  for each query parameter to add to the URL, where the object's
     *  keys are the query parameter keys and the object's values
     *  are the corresponding query parameter values.
     * @requiredField toAdd
     */
    add(toAdd: object): Promise<void>;
    /**
     * Removes query parameters from the current page's URL.
     *
     * Removes one or more query parameters to the current page's URL.
     *
     *  The \`remove()\` function can only be used when browser
     *  [rendering](https://support.wix.com/en/article/velo-about-the-page-rendering-process) happens,
     *  meaning you can only use it in frontend code after the page is ready.
     *
     *  If a specified key does not exist as a query parameter, it
     *  is ignored.
     *
     *  Calling the \`remove()\` function triggers the [\`onChange()\`](location.html#onChange)
     *  event handler if it has been registered.
     *  > **Note:** To retrieve the page's current query parameters, use the
     *  [\`query\`](location.html#query) property.
     * @param toRemove - List of keys to remove.
     * @requiredField toRemove
     */
    remove(toRemove: string[]): Promise<void>;
}
/**
 * Adds query parameters to the current page's URL.
 *
 * Adds one or more query parameters to the current page's URL.
 *
 *  The \`add()\` function can only be used when browser
 *  [rendering](https://support.wix.com/en/article/velo-about-the-page-rendering-process) happens,
 *  meaning you can only use it in frontend code after the page is ready.
 *
 *  If a specified key already exists as a query parameter, the
 *  newly specified value will overwrite the key's previous value.
 *
 *  Calling the \`add()\` function triggers the [\`onChange()\`](location.html#onChange)
 *  event handler if it has been registered.
 *  > **Note:** To retrieve the page's current query parameters, use the
 *  [\`query\`](location.html#query) property.
 * @param toAdd - An object containing a key:value pair
 *  for each query parameter to add to the URL, where the object's
 *  keys are the query parameter keys and the object's values
 *  are the corresponding query parameter values.
 * @requiredField toAdd
 */
declare function add(toAdd: object): Promise<void>;
/**
 * Removes query parameters from the current page's URL.
 *
 * Removes one or more query parameters to the current page's URL.
 *
 *  The \`remove()\` function can only be used when browser
 *  [rendering](https://support.wix.com/en/article/velo-about-the-page-rendering-process) happens,
 *  meaning you can only use it in frontend code after the page is ready.
 *
 *  If a specified key does not exist as a query parameter, it
 *  is ignored.
 *
 *  Calling the \`remove()\` function triggers the [\`onChange()\`](location.html#onChange)
 *  event handler if it has been registered.
 *  > **Note:** To retrieve the page's current query parameters, use the
 *  [\`query\`](location.html#query) property.
 * @param toRemove - List of keys to remove.
 * @requiredField toRemove
 */
declare function remove(toRemove: string[]): Promise<void>;

type queryParamsSdkModuleContext_QueryParams = QueryParams;
declare const queryParamsSdkModuleContext_add: typeof add;
declare const queryParamsSdkModuleContext_remove: typeof remove;
declare namespace queryParamsSdkModuleContext {
  export { type queryParamsSdkModuleContext_QueryParams as QueryParams, queryParamsSdkModuleContext_add as add, queryParamsSdkModuleContext_remove as remove };
}

type Methods$3<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const queryParams$1: HostModule<Methods$3<typeof queryParamsSdkModuleContext>, Host>;

/**
 * An object containing information about a location.
 */
interface Location {
    /**
     * Location path.
     * @requiredField path
     */
    path: string;
}
/**
 * An object containing navigation and scrolling options.
 */
interface NavOptions {
    /**
     * Whether the page scrolls to the top when navigating to the specified URL for a Wix page. Defaults to \`false\`. When \`true\`, the page remains at the same Y-axis position as the previously-viewed page. This setting does not affect scrolling for external URLs.
     */
    disableScrollToTop?: boolean;
}
/**
 * Handles location change events.
 * @param event - The new location.
 * @requiredField event
 * @servicePath wix-location-frontend.Location
 */
type LocationChangeHandler = (event: Location) => void;

/**
 * Gets the base URL of the current page.
 *
 * Premium sites:
 *  ![Premium site baseUrl](https://wixmp-833713b177cebf373f611808.wixmp.com/images/velo-images/media_url_premium_baseurl.png "Premium site baseUrl")
 *
 *  Free sites:
 *  ![Free site baseUrl](https://wixmp-833713b177cebf373f611808.wixmp.com/images/velo-images/media_url_free_baseurl.png "Free site baseUrl")
 * @readonly
 */
declare function baseUrl(): Promise<string>;
/**
 * Gets the path of the current page's URL.
 *
 * The path for a regular page is after the  [\`baseUrl\`](location/baseurl)
 * If the page is a dynamic page or router page, the [\`prefix\`](location/prefix) appears after the base URL, before the path.
 *
 *
 *  Premium sites:
 *  Path for a regular page, without a prefix: ![Premium site path](https://wixmp-833713b177cebf373f611808.wixmp.com/images/velo-images/media_url_premium_path.png "Premium site path")
 *  Path for a dynamic or router page with a prefix: ![Premium site path](https://wixmp-833713b177cebf373f611808.wixmp.com/images/velo-images/media_url_premium_path_with_prefix.png "Premium site path with a prefix")
 *
 *  Free sites:
 *   Path for a regular page, without a prefix: ![Free site path](https://wixmp-833713b177cebf373f611808.wixmp.com/images/velo-images/media_url_free_path.png "Free site path")
 *   Path for a dynamic or router page with a prefix: ![Free site path](https://wixmp-833713b177cebf373f611808.wixmp.com/images/velo-images/media_url_free_path_with_prefix.png "Free site path")
 * @readonly
 */
declare function path(): Promise<string[]>;
/**
 * Gets the prefix of a dynamic page's or router page's URL.
 *
 * Only dynamic pages and router pages have a prefix. The value of the
 *  \`prefix\` property for other page types is always \`undefined\`.
 *
 *  Premium sites:
 *  ![Premium site prefix](https://wixmp-833713b177cebf373f611808.wixmp.com/images/velo-images/media_url_premium_prefix.png "Premium site prefix")
 *
 *  Free sites:
 *  ![Free site prefix](https://wixmp-833713b177cebf373f611808.wixmp.com/images/velo-images/media_url_free_prefix.png "Free site prefix")
 *
 *  To learn more about dynamic page prefixes, see [About URL Prefixes and Page Grouping of Dynamic Pages](https://support.wix.com/en/article/about-url-prefixes-and-page-grouping-of-dynamic-pages).
 *
 *  To learn more about router page prefixes, see [About Routers](https://support.wix.com/en/article/about-routers#url-prefix).
 * @readonly
 */
declare function prefix(): Promise<string>;
/**
 * Gets the protocol of the current page's URL.
 *
 * Premium sites:
 *  ![Premium site protocol](https://wixmp-833713b177cebf373f611808.wixmp.com/images/velo-images/media_url_premium_protocol.png "Premium site protocol")
 *
 *  Free sites:
 *  ![Free site protocol](https://wixmp-833713b177cebf373f611808.wixmp.com/images/velo-images/media_url_free_protocol.png "Free site protocol")
 * @readonly
 */
declare function protocol(): Promise<string>;
/**
 * Gets an object that represents the query segment of the current page's URL.
 *
 * Premium sites:
 *  ![Premium site query](https://wixmp-833713b177cebf373f611808.wixmp.com/images/velo-images/media_url_premium_query.png "Premium site query")
 *
 *  Free sites:
 *  ![Free site query](https://wixmp-833713b177cebf373f611808.wixmp.com/images/velo-images/media_url_free_query.png "Free site query")
 * @readonly
 */
declare function query(): Promise<object>;
/**
 * Gets the full URL of the current page.
 *
 * Premium sites:
 *  ![Premium site URL](https://wixmp-833713b177cebf373f611808.wixmp.com/images/velo-images/media_url_premium_url.png "Premium site URL")
 *
 *  Free sites:
 *  ![Free site URL](https://wixmp-833713b177cebf373f611808.wixmp.com/images/velo-images/media_url_free_url.png "Free site URL")
 * @readonly
 */
declare function url(): Promise<string>;
/**
 * Adds an event handler that runs when an application page's URL changes.
 *
 * The event handler set by the \`onChange()\` function runs when the location is changed
 * but the change doesn't trigger navigation. This situation occurs when navigating between
 * subitems on a page that is managed by a full-page application.
 *
 * For example, a store product page is a full-page application. When a product page's path
 * changes because it is switching between items, no actual navigation is taking place. You
 * can use the \`onChange()\` event handler to determine when a new product is displayed and
 * perform any necessary partial updates on the current page.
 *
 * The \`onChange()\` function can only be used when browser
 * [rendering](https://support.wix.com/en/article/velo-about-the-page-rendering-process) happens,
 * meaning you can only use it in frontend code after the page is ready.
 *
 * To determine if a page is managed by a full-page application, use the \`wix-site-frontend\`
 * [\`currentPage\`](site.html#currentPage) property or [\`getSiteStructure()\`](site.html#getSiteStructure)
 * function to retrieve a \`StructurePage\` object that
 * corresponds to the page. If the object contains an \`applicationId\` value, then the
 * page is managed by a full-page application.
 * @param handler - The name of the function or
 *  the function expression to run when the location changes.
 * @requiredField handler
 * @servicePath wix-location-frontend.LocationChangeHandler
 */
declare function onChange(handler: LocationChangeHandler): Promise<void>;
/**
 * Directs the browser to navigate to the specified URL.
 *
 * The \`to()\` function navigates the browser to another web page.
 *
 *  The \`to()\` function can only be used when browser
 *  [rendering](https://support.wix.com/en/article/velo-about-the-page-rendering-process) happens,
 *  meaning you can only use it in frontend code after the page is ready.
 *
 *  The following link patterns are supported:
 *
 *  + \`/localPageURL\`: Another page on your site.
 *  + \`/localPageURL#\`: Another page on your site scrolled to the
 *     element with the specified ID. The element must be an element that supports
 *     the [\`scrollTo\`](https://dev.wix.com/docs/velo/api-reference/$w/node/scroll-to) function.
 *  + \`/localPageURL?queryParam=value\`: Another page on your site with query parameters.
 *  + \`/\`: Your site's home page.
 *  + \`http(s)://\`: An external web address.
 *  + \`wix:document://\`: A document stored in the Media Manager.
 *  + \`mailto:@?subject=\`: An email.
 *  + \`tel:\`: A phone number.
 *
 *
 *  To find the local URL of a page on your site in the Editor:
 *
 *  + Regular page: See the **SEO** tab of the **Page Settings** panel.
 *  + Dynamic page: See the **Page Info** tab of the **Page Settings** panel
 *    for the URL structure. The actual URL used for navigation needs to contain
 *    values where the placeholders are.
 *
 *    For example, if the URL structure of your dynamic page looks like:
 *
 *    ![Dynamic Page URL](https://wixmp-833713b177cebf373f611808.wixmp.com/images/velo-images/media_dynamic_url.png "Dynamic Page URL")
 *
 *    and you have an item with the title "Waffles", the local URL to that page
 *    is /Recipes/Waffles.
 *  + Router page: You cannot navigate directly to a specific router page. You
 *    can navigate to a URL with the router's prefix and the router code
 *    decides which page to route to.
 *
 *  By default, when navigating to a new URL for a Wix page, the page scrolls to the top. Set
 *  the \`disableScrollToTop\` navigation parameter property to \`true\` if you want the
 *  page to remain at the current Y-axis position as the previously-viewed page.
 *
 *  The \`to()\` function attempts to properly encode the URL parameter that
 *  is passed to it. For example, \`.../some page\` is encoded to
 *  \`.../some%20page\`. However, some URLs do not have one unambiguous encoding.
 *  In those cases it is up to you to encode the URL to reflect your intentions.
 *  Because of these situations, it is a best practice to always encode URLs
 *  before you pass them to the \`to()\` function.
 *
 *  Note that Wix URLs do not contain spaces. A page which has spaces in its
 *  name has its spaces replaced with dashes (\`-\`). Similarly, a dynamic page
 *  whose URL contains the value of a field in your collection with spaces
 *  has its spaces replaced with dashes (\`-\`).
 *
 *  > **Note:** The \`to()\` function does not work while previewing your site.
 * @param url - The URL of the page or website to navigate to.
 * @requiredField url
 * @param options - Options to use when navigating to the specified URL, such as scrolling options.
 * @servicePath wix-location-frontend.NavOptions
 */
declare function to(url: string, options?: NavOptions): Promise<void>;

declare const locationSdkModuleContext_baseUrl: typeof baseUrl;
declare const locationSdkModuleContext_onChange: typeof onChange;
declare const locationSdkModuleContext_path: typeof path;
declare const locationSdkModuleContext_prefix: typeof prefix;
declare const locationSdkModuleContext_protocol: typeof protocol;
declare const locationSdkModuleContext_query: typeof query;
declare const locationSdkModuleContext_to: typeof to;
declare const locationSdkModuleContext_url: typeof url;
declare namespace locationSdkModuleContext {
  export { locationSdkModuleContext_baseUrl as baseUrl, locationSdkModuleContext_onChange as onChange, locationSdkModuleContext_path as path, locationSdkModuleContext_prefix as prefix, locationSdkModuleContext_protocol as protocol, locationSdkModuleContext_query as query, locationSdkModuleContext_to as to, locationSdkModuleContext_url as url };
}

type Methods$2<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const location$1: HostModule<Methods$2<typeof locationSdkModuleContext>, Host>;

declare namespace wixSitelocation {
  export { location$1 as location, queryParams$1 as queryParams };
}

type Methods$1<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const queryParams: Methods$1<typeof queryParamsSdkModuleContext>;

type Methods<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const location: Methods<typeof locationSdkModuleContext>;

declare const wixSitelocationContext_location: typeof location;
declare const wixSitelocationContext_queryParams: typeof queryParams;
declare namespace wixSitelocationContext {
  export { wixSitelocationContext_location as location, wixSitelocationContext_queryParams as queryParams };
}

declare module "@wix/site-location" {
     export = wixSitelocation;
}
 
declare module "@wix/site-location/context" {
     export = wixSitelocationContext;
}
"
`;

exports[`Site SDK - Fixed versions Verify site-members against snapshot 1`] = `
"type HostModule<T, H extends Host$1> = {
    __type: 'host';
    create(host: H): T;
};
type Host$1<Environment = unknown> = {
    channel: {
        observeState(callback: (props: unknown, environment: Environment) => unknown): {
            disconnect: () => void;
        } | Promise<{
            disconnect: () => void;
        }>;
    };
    environment?: Environment;
    /**
     * Optional bast url to use for API requests, for example \`www.wixapis.com\`
     */
    apiBaseUrl?: string;
};

declare global {
	// eslint-disable-next-line @typescript-eslint/consistent-type-definitions -- It has to be an \`interface\` so that it can be merged.
	interface SymbolConstructor {
		readonly observable: symbol;
	}
}

type WixNamespace = string;
interface Channel<Environment> {
    observeState(callback: (props: unknown, environment: Environment) => unknown): {
        disconnect: () => void;
    } | Promise<{
        disconnect: () => void;
    }>;
}
interface WebsiteChannel extends Channel<unknown> {
    invoke: (args: {
        namespace: WixNamespace;
        method: string;
        args: unknown[];
    }) => Promise<unknown>;
    getAccessToken: () => Promise<string>;
}
type Host<Environment = unknown> = {
    channel: WebsiteChannel;
    environment?: Environment;
    apiBaseUrl?: string;
};

/**
 * The CurrentMember API contains functionality for viewing and managing site members from frontend code.
 *
 * To use the CurrentMember API, import \`{currentMember}\` from the \`wix-members-frontend\` module:
 *
 * \`\`\`javascript
 * import { currentMember } from 'wix-members-frontend';
 * \`\`\`
 *
 * > **Note:** The APIs in \`CurrentMember\` are only partially functional when previewing your site. View a published version of your site to see their complete functionality.
 */
interface CurrentMember {
    /**
     * Retrieves the currently logged-in member.
     *
     * The \`getMember()\` function returns a Promise that resolves
     * to the currently logged-in member.
     *
     * > **Notes:**
     * > - The member data in the resolved promise will only include custom fields from your site's contacts if [they are added to your site Members in your site's dashboard](https://support.wix.com/en/article/customizing-your-member-profile-fields).
     * > - The APIs in \`CurrentMember\` are only partially functional when previewing your site. View a published version of your site to see their complete functionality.
     * @param options - Fieldset options.
     * @servicePath wix-members-frontend.CurrentMember.FieldsetOptions
     * @returns Fulfilled - If a member is logged in, the retrieved member.
     * If a member isn't logged in, \`undefined\`.
     * @servicePath wix-members-frontend.CurrentMember.Member
     */
    getMember(options?: FieldsetOptions): Promise<Member>;
    /**
     * Retrieves the member's roles.
     *
     * The \`getRoles()\` function returns a Promise that resolves to the
     * [roles](https://support.wix.com/en/article/creating-member-roles-6943237)
     * of the currently logged-in member.
     * If no member is currently logged in, the Promise is rejected.
     *
     * > **Notes:**
     * > - The member data in the resolved promise will only include custom fields from your site's contacts if [they are added to your site Members in your site's dashboard](https://support.wix.com/en/article/customizing-your-member-profile-fields).
     * > - The APIs in \`CurrentMember\` are only partially functional when previewing your site. View a published version of your site to see their complete functionality.
     *
     * The following results are returned depending on the session identity:
     *
     * | Session Identity                                 | Promise Resolves To                                                    |
     * | ------------------------------------------------ | ---------------------------------------------------------------------- |
     * | Logged-in member                                 | Array of member roles                                                  |
     * | Site owner or contributor with admin permissions | Array of member roles, plus an additional role where \`name\` is \`Admin\` |
     * | Anyone else                                      | Promise is rejected                                                    |
     *
     * @returns Fulfilled - List of roles.
     * Rejected - If no member is currently logged in.
     * @servicePath wix-members-frontend.CurrentMember.Role
     */
    getRoles(): Promise<Role[]>;
    /**
     * Removes the currently logged-in member from the site community and sets their profile to private.
     *
     * The \`makeProfilePrivate()\` function returns a Promise that resolves to a member object
     * when the member's profile privacy is updated.
     *
     * When a member's profile is private,
     * they do not have access to the site's
     * [Members Area](https://support.wix.com/en/article/about-members-area)
     * features,
     * and their profile is hidden from other members and site visitors.
     *
     * > **Notes:**
     * > - The member data in the resolved promise will only include custom fields from your site's contacts if [they are added to your site Members in your site's dashboard](https://support.wix.com/en/article/customizing-your-member-profile-fields).
     * > - The APIs in \`CurrentMember\` are only partially functional when previewing your site. View a published version of your site to see their complete functionality.
     * > - If a public member profile changes to private, their public content (such as forum posts and blog comments) remain publicly visible.
     *
     * @returns Fulfilled - Updated member.
     * @servicePath wix-members-frontend.CurrentMember.Member
     */
    makeProfilePrivate(): Promise<Member>;
    /**
     * Joins the currently logged-in member to the site community and sets their profile to public.
     *
     * The \`makeProfilePublic()\` function returns a Promise that resolves to a member object
     * when the member's profile privacy is updated.
     *
     * When a member's profile is public,
     * they have access to the site's
     * [Members Area](https://support.wix.com/en/article/about-members-area)
     * features — such as chat, forum, and followers —
     * and their profile is visible to other members and site visitors.
     * > **Notes:**
     * > - The member data in the resolved promise will only include custom fields from your site's contacts if [they are added to your site Members in your site's dashboard](https://support.wix.com/en/article/customizing-your-member-profile-fields).
     * > - The APIs in \`CurrentMember\` are only partially functional when previewing your site. View a published version of your site to see their complete functionality.
     *
     * @returns Fulfilled - Updated member.
     * @servicePath wix-members-frontend.CurrentMember.Member
     */
    makeProfilePublic(): Promise<Member>;
}
interface Address extends addressStreetOneOf {
    /**
     * Street address ID.
     */
    _id?: string;
    /**
     * Street address object, with number and name in separate fields.
     * @servicePath wix-members-frontend.CurrentMember.StreetAddress
     */
    streetAddress?: StreetAddress;
    /**
     * Main address line, usually street and number, as free text.
     */
    addressLine?: string;
    /**
     * Free text providing more detailed address information,
     *  such as apartment, suite, or floor.
     */
    addressLine2?: string;
    /**
     * City name.
     */
    city?: string;
    /**
     * Code for a subdivision (such as state, prefecture, or province) in an
     * [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) format.
     */
    subdivision?: string;
    /**
     * 2-letter country code in an
     * [ISO-3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    country?: string;
    /**
     * Postal code.
     */
    postalCode?: string;
}
/**
 * @oneof
 */
interface addressStreetOneOf {
    /**
     * Main address line, usually street and number, as free text.
     */
    addressLine?: string;
    /**
     * Street address object, with number and name in separate fields.
     * @servicePath wix-members-frontend.CurrentMember.StreetAddress
     */
    streetAddress?: StreetAddress;
}
/**
 * Member's contact information. Contact information is stored in the
 *
 * [Contact List](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fcontacts).
 *
 *
 */
interface ContactDetails {
    /**
     * Contact's first name.
     */
    firstName?: string;
    /**
     * Contact's last name.
     */
    lastName?: string;
    /**
     * List of phone numbers.
     * @requiredField phones
     */
    phones: string[];
    /**
     * List of email addresses.
     * @requiredField emails
     */
    emails: string[];
    /**
     * List of street addresses.
     * @requiredField addresses
     * @servicePath wix-members-frontend.CurrentMember.Address
     */
    addresses: Address[];
    /**
     * Contact's birthdate, formatted as \`"YYYY-MM-DD"\`.
     *
     *  Example: \`"2020-03-15"\` for March 15, 2020.
     */
    birthdate?: string;
    /**
     * Contact's company name.
     */
    company?: string;
    /**
     * Contact's job title.
     */
    jobTitle?: string;
    /**
     * Custom fields,
     * [structured as key:object pairs](members/introduction#data-structure).
     * Custom field IDs are defined in the
     * [Contacts Extended Fields API](https://dev.wix.com/docs/velo/api-reference/wix-crm-backend/contacts).
     * The paired object contains the \`name\` and \`value\` properties,
     * where \`name\` is the display name and \`value\` is the value stored for the member.
     *
     * Only custom fields
     * [added to the member profile in the Dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fmembers-account)
     * are available through the Members API.
     * Empty fields are not returned.
     *
     * When updating a member, \`name\` is ignored.
     * @requiredField customFields
     */
    customFields: object;
}
interface FieldsetOptions {
    /**
     * Predefined sets of fields to return.
     * When multiple fieldsets are provided, the union of all the included fields is returned.
     *
     * Predefined fieldsets are one of:
     *
     * - \`"FULL"\`: Returns all fields.
     * - \`"PUBLIC"\`: Returns \`_id\` and all fields under \`profile\`. With this fieldset, \`profile.status\`, \`profile.privacyStatus\`, and \`profile.activityStatus\` are returned as \`"UNKNOWN"\`.
     *
     * Defaults to \`[ "FULL" ]\`.
     * @requiredField fieldsets
     */
    fieldsets: string[];
}
/**
 * Member's profile photo.
 */
interface Image {
    /**
     * Image URL.
     * @requiredField url
     */
    url: string;
    /**
     * Original image width.
     * @requiredField height
     */
    height: number;
    /**
     * Original image height.
     * @requiredField width
     */
    width: number;
    /**
     * X-axis offset.
     *
     *  Defaults to \`0\`.
     * @requiredField offsetX
     */
    offsetX: number;
    /**
     * Y-axis offset.
     *
     *  Defaults to \`0\`.
     * @requiredField offsetY
     */
    offsetY: number;
}
/**
 * Updated member.
 */
interface Member {
    /**
     * Member ID.
     * @requiredField _id
     */
    _id: string;
    /**
     * Email used by the member to log in to the site.
     */
    loginEmail?: string;
    /**
     * Member site access status.
     *
     *
     *
     * One of:
     *
     * - \`"PENDING"\`: Member created and is waiting for approval by site owner.
     * - \`"APPROVED"\`: Member can log in to the site.
     * - \`"OFFLINE"\`: Member is a [guest author](https://support.wix.com/en/article/wix-blog-adding-guest-authors-to-your-blog) for the site blog and cannot log in to the site.
     * - \`"BLOCKED"\`: Member is blocked and cannot log in to the site.
     * - \`"UNKNOWN"\`: Insufficient permissions to get the status.
     *
     * @requiredField status
     */
    status: string;
    /**
     * Contact ID.
     * @requiredField contactId
     */
    contactId: string;
    /**
     * Member privacy status.
     *
     *
     *
     *
     * One of:
     *
     * - \`"PUBLIC"\`: Member is visible to everyone.
     * - \`"PRIVATE"\`: Member is hidden from site visitors and other site members. Member is returned only to site contributors and apps with the appropriate permissions.
     * - \`"UNKNOWN"\`: Insufficient permissions to get the status.
     *
     * @requiredField privacyStatus
     */
    privacyStatus: string;
    /**
     * Member activity status.
     *
     *
     *
     *
     * One of:
     *
     * - \`"ACTIVE"\`: Member can write forum posts and blog comments.
     * - \`"MUTED"\`: Member cannot write forum posts or blog comments.
     * - \`"UNKNOWN"\`: Insufficient permissions to get the status.
     *
     * @requiredField activityStatus
     */
    activityStatus: string;
    /**
     * Date and time when the member was created.
     * @requiredField _createdDate
     */
    _createdDate: Date;
    /**
     * Date and time when the member was updated.
     * @requiredField _updatedDate
     */
    _updatedDate: Date;
    /**
     * Date and time when the member last logged in to the site.
     */
    lastLoginDate?: Date;
    /**
     * Member's contact information. Contact information is stored in the
     * [Contact List](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fcontacts).
     *
     *
     * @servicePath wix-members-frontend.CurrentMember.ContactDetails
     */
    contactDetails?: ContactDetails;
    /**
     * Profile display info.
     * @requiredField profile
     * @servicePath wix-members-frontend.CurrentMember.Profile
     */
    profile: Profile;
}
/**
 * Profile display info.
 */
interface Profile {
    /**
     * Name that identifies the member to other members.
     * Displayed on the member's profile page
     * and interactions in the forum or blog.
     * @requiredField nickname
     */
    nickname: string;
    /**
     * Slug that determines the member's profile page URL.
     * @requiredField slug
     */
    slug: string;
    /**
     * Member's profile photo.
     * @servicePath wix-members-frontend.CurrentMember.Image
     */
    profilePhoto?: Image;
    /**
     * Member's profile photo.
     * @servicePath wix-members-frontend.CurrentMember.Image
     */
    coverPhoto?: Image;
    /**
     * Member title.
     *
     *
     */
    title?: string;
}
interface Role {
    /**
     * Role ID.
     * @requiredField _id
     */
    _id: string;
    /**
     * Role name as defined in the site's
     *  [Member Permissions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fmember-permissions/roles)
     *  page or one of \`"Admin"\` or \`"Member"\`.
     * @requiredField title
     */
    title: string;
    /**
     * Role description, if defined in the site's dashboard.
     */
    description?: string;
    /**
     * Role color, as defined in the site's
     * [Member Permissions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fmember-permissions/roles)
     * page.
     *
     * One of:
     *
     * - \`"DARK_BLUE"\`
     * - \`"LIGHT_BLUE"\`
     * - \`"TEAL"\`
     * - \`"LIGHT_GREEN"\`
     * - \`"YELLOW"\`
     * - \`"ORANGE"\`
     * - \`"RED"\`
     * - \`"VIOLET"\`
     * - \`"PURPLE"\`
     * @requiredField color
     */
    color: string;
    /**
     * Date and time the role was created.
     */
    _createdDate?: Date;
}
/**
 * Street address object, with number and name in separate fields.
 */
interface StreetAddress {
    /**
     * Street number.
     * @requiredField number
     */
    number: string;
    /**
     * Street name.
     * @requiredField name
     */
    name: string;
}
/**
 * Retrieves the currently logged-in member.
 *
 * The \`getMember()\` function returns a Promise that resolves
 * to the currently logged-in member.
 *
 * > **Notes:**
 * > - The member data in the resolved promise will only include custom fields from your site's contacts if [they are added to your site Members in your site's dashboard](https://support.wix.com/en/article/customizing-your-member-profile-fields).
 * > - The APIs in \`CurrentMember\` are only partially functional when previewing your site. View a published version of your site to see their complete functionality.
 * @param options - Fieldset options.
 * @servicePath wix-members-frontend.CurrentMember.FieldsetOptions
 * @returns Fulfilled - If a member is logged in, the retrieved member.
 * If a member isn't logged in, \`undefined\`.
 * @servicePath wix-members-frontend.CurrentMember.Member
 */
declare async function getMember(options?: FieldsetOptions): Promise<Member>;
/**
 * Retrieves the member's roles.
 *
 * The \`getRoles()\` function returns a Promise that resolves to the
 * [roles](https://support.wix.com/en/article/creating-member-roles-6943237)
 * of the currently logged-in member.
 * If no member is currently logged in, the Promise is rejected.
 *
 * > **Notes:**
 * > - The member data in the resolved promise will only include custom fields from your site's contacts if [they are added to your site Members in your site's dashboard](https://support.wix.com/en/article/customizing-your-member-profile-fields).
 * > - The APIs in \`CurrentMember\` are only partially functional when previewing your site. View a published version of your site to see their complete functionality.
 *
 * The following results are returned depending on the session identity:
 *
 * | Session Identity                                 | Promise Resolves To                                                    |
 * | ------------------------------------------------ | ---------------------------------------------------------------------- |
 * | Logged-in member                                 | Array of member roles                                                  |
 * | Site owner or contributor with admin permissions | Array of member roles, plus an additional role where \`name\` is \`Admin\` |
 * | Anyone else                                      | Promise is rejected                                                    |
 *
 * @returns Fulfilled - List of roles.
 * Rejected - If no member is currently logged in.
 * @servicePath wix-members-frontend.CurrentMember.Role
 */
declare async function getRoles(): Promise<Role[]>;
/**
 * Removes the currently logged-in member from the site community and sets their profile to private.
 *
 * The \`makeProfilePrivate()\` function returns a Promise that resolves to a member object
 * when the member's profile privacy is updated.
 *
 * When a member's profile is private,
 * they do not have access to the site's
 * [Members Area](https://support.wix.com/en/article/about-members-area)
 * features,
 * and their profile is hidden from other members and site visitors.
 *
 * > **Notes:**
 * > - The member data in the resolved promise will only include custom fields from your site's contacts if [they are added to your site Members in your site's dashboard](https://support.wix.com/en/article/customizing-your-member-profile-fields).
 * > - The APIs in \`CurrentMember\` are only partially functional when previewing your site. View a published version of your site to see their complete functionality.
 * > - If a public member profile changes to private, their public content (such as forum posts and blog comments) remain publicly visible.
 *
 * @returns Fulfilled - Updated member.
 * @servicePath wix-members-frontend.CurrentMember.Member
 */
declare async function makeProfilePrivate(): Promise<Member>;
/**
 * Joins the currently logged-in member to the site community and sets their profile to public.
 *
 * The \`makeProfilePublic()\` function returns a Promise that resolves to a member object
 * when the member's profile privacy is updated.
 *
 * When a member's profile is public,
 * they have access to the site's
 * [Members Area](https://support.wix.com/en/article/about-members-area)
 * features — such as chat, forum, and followers —
 * and their profile is visible to other members and site visitors.
 * > **Notes:**
 * > - The member data in the resolved promise will only include custom fields from your site's contacts if [they are added to your site Members in your site's dashboard](https://support.wix.com/en/article/customizing-your-member-profile-fields).
 * > - The APIs in \`CurrentMember\` are only partially functional when previewing your site. View a published version of your site to see their complete functionality.
 *
 * @returns Fulfilled - Updated member.
 * @servicePath wix-members-frontend.CurrentMember.Member
 */
declare async function makeProfilePublic(): Promise<Member>;

type currentMemberSdkModuleContext_Address = Address;
type currentMemberSdkModuleContext_ContactDetails = ContactDetails;
type currentMemberSdkModuleContext_CurrentMember = CurrentMember;
type currentMemberSdkModuleContext_FieldsetOptions = FieldsetOptions;
type currentMemberSdkModuleContext_Image = Image;
type currentMemberSdkModuleContext_Member = Member;
type currentMemberSdkModuleContext_Profile = Profile;
type currentMemberSdkModuleContext_Role = Role;
type currentMemberSdkModuleContext_StreetAddress = StreetAddress;
type currentMemberSdkModuleContext_addressStreetOneOf = addressStreetOneOf;
declare const currentMemberSdkModuleContext_getMember: typeof getMember;
declare const currentMemberSdkModuleContext_getRoles: typeof getRoles;
declare const currentMemberSdkModuleContext_makeProfilePrivate: typeof makeProfilePrivate;
declare const currentMemberSdkModuleContext_makeProfilePublic: typeof makeProfilePublic;
declare namespace currentMemberSdkModuleContext {
  export { type currentMemberSdkModuleContext_Address as Address, type currentMemberSdkModuleContext_ContactDetails as ContactDetails, type currentMemberSdkModuleContext_CurrentMember as CurrentMember, type currentMemberSdkModuleContext_FieldsetOptions as FieldsetOptions, type currentMemberSdkModuleContext_Image as Image, type currentMemberSdkModuleContext_Member as Member, type currentMemberSdkModuleContext_Profile as Profile, type currentMemberSdkModuleContext_Role as Role, type currentMemberSdkModuleContext_StreetAddress as StreetAddress, type currentMemberSdkModuleContext_addressStreetOneOf as addressStreetOneOf, currentMemberSdkModuleContext_getMember as getMember, currentMemberSdkModuleContext_getRoles as getRoles, currentMemberSdkModuleContext_makeProfilePrivate as makeProfilePrivate, currentMemberSdkModuleContext_makeProfilePublic as makeProfilePublic };
}

/**
 * The Authentication API contains functionality for authenticating members from frontend code.
 *
 * To use the Authentication API, import \`{authentication}\` from the \`wix-members-frontend\` module:
 *
 * \`\`\`javascript
 * import { authentication } from 'wix-members-frontend';
 * \`\`\`
 */
interface Authentication {
    /**
     * Logs the current member into the site using the given session token.
     *
     * The \`applySessionToken()\` function returns a Promise that resolves when the
     *  given session token is applied and the current member is logged into the site.
     *
     *
     * You receive a session token from the following
     * wix-members-backend functions:
     *
     *  - [\`approveByEmail()\`](https://dev.wix.com/docs/velo/api-reference/wix-members-backend/authentication/approve-by-email)
     *  - [\`approveByToken()\`](https://dev.wix.com/docs/velo/api-reference/wix-members-backend/authentication/approve-by-token)
     *  - [\`register()\`](https://dev.wix.com/docs/velo/api-reference/wix-members-backend/authentication/register)
     *  - [\`generateSessionToken()\`](https://dev.wix.com/docs/velo/api-reference/wix-members-backend/authentication/generatesessiontoken)
     *  - [\`login()\`](https://dev.wix.com/docs/velo/api-reference/wix-members-backend/authentication/login)
     *
     *  Pass the returned session token to your page code and apply it by
     *  calling \`applySessionToken()\` to complete the process started by one of the
     *  above functions.
     * @param sessionToken - Session token to apply.
     * @requiredField sessionToken
     * @returns Fulfilled - When the token is applied.
     */
    applySessionToken(sessionToken: string): Promise<void>;
    /**
     * Indicates whether the site visitor is a logged-in member.
     *
     * The \`loggedIn()\` function returns a boolean value
     * indicating whether the current visitor is logged in as a site member.
     *
     * If a member is logged in, \`loggedIn()\` returns \`true\`.
     * Otherwise, \`loggedIn()\` returns \`false\`.
     *
     * @returns \`true\` if a member is logged in. Otherwise, \`false\`.
     */
    loggedIn(): Promise<boolean>;
    /**
     * Logs a registered member in with an email and password.
     *
     * The \`login()\` function returns a Promise that resolves when the member with
     *  the specified email address and password is logged in.
     *
     *  The \`login()\` function only works with existing members. To register a new member use
     *  the [\`register()\` function](#register).
     *
     * > **Note:**
     * > - The APIs in \`wix-members-frontend\` are only partially functional when previewing your site.
     * >   View a published version of your site to see their complete functionality.
     * @param email - Login email address.
     * @requiredField email
     * @param password - Member password.
     * @requiredField password
     * @returns Fulfilled - When the member is logged in.
     * Rejected - Error message.
     */
    login(email: string, password: string): Promise<void>;
    /**
     * Logs the current member out of the site.
     *
     * The \`logout()\` function logs the current member out of the site.
     *
     * > **Notes:**
     * >
     * > - The APIs in \`wix-members-frontend\` are only partially functional when previewing your site.
     * >   View a published version of your site to see their complete functionality.
     * >
     * > - The APIs in \`wix-members-frontend\` can only be used once the page has loaded. Therefore,
     * >   you must use them in code that is contained in or is called from the
     * >   [onReady()](https://dev.wix.com/docs/velo/api-reference/$w/on-ready) event handler or any element event handler.
     */
    logout(): Promise<void>;
    /**
     * Sets the function that runs when a member logs in.
     *
     * The \`onLogin()\` event handler runs when a member logs into your site.
     *
     * \`onLogin\` receives a \`currentMember\` object for the logged-in member,
     * which contains the [\`CurrentMember\` methods](members/currentmember)
     * you can use to retrieve the member's information.
     *
     * Usually, you want to call \`onLogin()\` in the **masterPage.js** file in the
     * code editor so that the \`onLogin()\` event handler runs no matter which
     * page a member uses to log in.
     *
     * > **Notes:**
     * >
     * > - The APIs in \`wix-members-frontend\` are only partially functional when previewing your site.
     * >   View a published version of your site to see their complete functionality.
     * >
     * > - The APIs in \`wix-members-frontend\` can only be used once the page has loaded. Therefore,
     * >   you must use them in code that is contained in or is called from the
     * >   [onReady()](https://dev.wix.com/docs/velo/api-reference/$w/on-ready) event handler or any element event handler.
     * @param handler - Function name or expression to run when a member logs in.
     * @requiredField handler
     * @servicePath wix-members-frontend.Authentication.LoginHandler
     */
    onLogin(handler: LoginHandler): Promise<void>;
    /**
     * Sets the function that runs when a member logs out.
     *
     * Use the \`onLogout()\` function for code you want to run after a member logs out
     * from your site.
     *
     *  Usually, you want to call the \`onLogout()\` function in the **masterPage.js** file in the
     *  code editor so that the \`onLogout()\` event handler runs no matter which
     *  page on your site a member uses to log out.
     *
     * > **Notes:**
     * >
     * > - The APIs in \`wix-members-frontend\` are only partially functional when previewing your site.
     * >   View a published version of your site to see their complete functionality.
     * >
     * > - The APIs in \`wix-members-frontend\` can only be used once the page has loaded. Therefore,
     * >   you must use them in code that is contained in or is called from the
     * >   [onReady()](https://dev.wix.com/docs/velo/api-reference/$w/on-ready) event handler or any element event handler.
     * @param handler - Function name or expression to run when a member logs out.
     * @requiredField handler
     * @servicePath wix-members-frontend.Authentication.LogoutHandler
     */
    onLogout(handler: LogoutHandler): Promise<void>;
    /**
     * Prompts the current site visitor with a password reset modal.
     *
     * The \`promptForgotPassword()\` function returns a Promise that resolves when
     * the visitor submits the **Create New Password** form.
     *
     * If the visitor cancels the form without submitting it,
     * the Promise is rejected.
     *
     * \`promptForgotPassword()\` cannot be called before the page is ready.
     *
     * > **Notes:**
     * >
     * > - The APIs in \`wix-members-frontend\` are only partially functional when previewing your site.
     * >   View a published version of your site to see their complete functionality.
     * >
     * > - The APIs in \`wix-members-frontend\` can only be used once the page has loaded. Therefore,
     * >   you must use them in code that is contained in or is called from the
     * >   [\`onReady()\`](https://dev.wix.com/docs/velo/api-reference/$w/on-ready) event handler or any element event handler.
     * >
     * > - If you \`return\` or \`await\` the \`promptForgotPassword()\` function
     * >   when calling from \`onReady()\`, the page will be prevented from loading.
     * >   To handle the resolved promise, use \`.then()\` and \`.catch()\`.
     *
     * @returns Fulfilled - When the form is submitted.
     * Rejected - Message that the dialog was canceled, user is already logged in, or another reason the password reset failed.
     */
    promptForgotPassword(): Promise<void>;
    /**
     * Prompts the current visitor to log in as a site member.
     *
     * The \`promptLogin()\` function returns a Promise that resolves
     * when the login has completed.
     *
     * If the visitor cancels the form without logging in,
     * the Promise is rejected.
     *
     * The \`promptLogin()\` function cannot be called before the page is ready.
     *
     * > **Notes:**
     * >
     * > - The APIs in \`wix-members-frontend\` are only partially functional when previewing your site.
     * >   View a published version of your site to see their complete functionality.
     * >
     * > - The APIs in \`wix-members-frontend\` can only be used once the page has loaded. Therefore,
     * >   you must use them in code that is contained in or is called from the
     * >   [\`onReady()\`](https://dev.wix.com/docs/velo/api-reference/$w/on-ready) event handler or any element event handler.
     * >
     * > - If you \`return\` or \`await\` the \`promptLogin()\` function
     * >   when calling from \`onReady()\`, the page will be prevented from loading.
     * >   To handle the resolved promise, use \`.then()\` and \`.catch()\`.
     * @param options - The options that determine how the login dialog box appears.
     * @servicePath wix-members-frontend.Authentication.LoginOptions
     * @returns Fulfilled - When the member is logged in.
     * Rejected - Message that the dialog was canceled, or any other reason the member failed to log in.
     */
    promptLogin(options?: LoginOptions): Promise<void>;
    /**
     * Registers a new site member.
     *
     * The \`register()\` function returns a Promise that resolves to a \`RegistrationResult\`
     *  object when the member is registered or pending registration.
     *
     *  The specified \`password\` must be between 4 and 100 ASCII characters.
     *
     *  See [New Members](https://dev.wix.com/docs/velo/api-reference/wix-members-frontend/authentication/new-members) to learn about verifying emails and approving members.
     *
     *  > **Notes:**
     *  >
     *  > - The APIs in \`wix-members-frontend\` are only partially functional when previewing your site.
     *  >   View a published version of your site to see their complete functionality.
     *  >
     *  > - The member data in the resolved Promise includes custom fields from your site's contacts
     *  >   only if [they are added to your site members in your dashboard](https://support.wix.com/en/article/customizing-your-member-profile-fields).
     *  >
     *  > - When a new member signs up using an email address
     *  >   that's already in your site's Contact List,
     *  >   a notification is displayed
     *  >   and a confirmation email is sent to the new member.
     *  >   To register a member without displaying the notification, use
     *  >   [\`register()\`](https://dev.wix.com/docs/velo/api-reference/wix-members-backend/authentication/register) from wix-members-backend
     *  >   (this does not suppress the confirmation email).
     *  >
     *  > - When your site's member signup settings are set to [automatic approval](https://dev.wix.com/docs/velo/api-reference/wix-members-frontend/authentication/new-members#automatic-approval),
     *  >   calling \`register()\` from wix-members-frontend
     *  >   (in page code) is as secure as calling
     *  >   [\`register()\`](https://dev.wix.com/docs/velo/api-reference/wix-members-backend/authentication/register) from wix-members-backend (in backend code),
     *  >   unless you are implementing [custom site registration using Velo forms](https://dev.wix.com/docs/develop-websites/articles/code-tutorials/wix-members/enabling-custom-site-registration).
     *  >   However, when registration is set to [manual approval](https://dev.wix.com/docs/velo/api-reference/wix-members-frontend/authentication/new-members#manual-approval),
     *  >   calling \`register()\` from wix-members-backend
     *  >   allows you to build more secure approval flows
     *  >   by keeping tokens hidden from the frontend.
     * @param email - Email address the new member will use to log in.
     * @requiredField email
     * @param password - Password to assign to the new member.
     * Must be 4 to 100 ASCII characters.
     * @requiredField password
     * @param options - Registration options.
     * @servicePath wix-members-frontend.Authentication.RegistrationOptions
     * @returns Fulfilled - When the member is registered.
     * Rejected - Error message.
     * @servicePath wix-members-frontend.Authentication.RegistrationResult
     */
    register(email: string, password: string, options?: RegistrationOptions): Promise<RegistrationResult>;
    /**
     * Sends a site member an email with a link to set their password.
     *
     * The \`sendSetPasswordEmail()\` function returns a Promise that resolves
     * when the set password link is emailed to the member.
     *
     * The set password link is valid for 3 hours,
     * and it can be used only once.
     * If the link expires, no changes are made to the password.
     * @param email - Login email of the member whose password will be set.
     * @requiredField email
     * @param options - Email display options.
     * @servicePath wix-members-frontend.Authentication.SetPasswordEmailOptions
     * @returns Fulfilled - If the email is sent.
     * Rejected - Error message.
     */
    sendSetPasswordEmail(email: string, options?: SetPasswordEmailOptions): Promise<boolean>;
}
/**
 * An object that contains information about a site contact.
 */
interface ContactInfo {
    /**
     * Contact's first name.
     */
    firstName?: string;
    /**
     * Contact's last name.
     */
    lastName?: string;
    /**
     * Contact's image source URL.
     */
    picture?: string;
    /**
     * List of contact's email addresses.
     *  When creating a contact, if no phone number is
     *  provided, at least 1 email address must be provided.
     */
    emails?: string[];
    /**
     * List of contact's phone numbers.
     *  When creating a contact, if no email is
     *  provided, at least 1 phone number must be provided.
     */
    phones?: string[];
    /**
     * Contact's language.
     */
    language?: string;
    /**
     * Any number of custom fields. [Custom fields](https://www.wix.com/velo/reference/wix-members-frontend/custom-fields)
     *  are used to store additional information about your site's contacts.
     *
     *  >**Note:** \`customFields\` is not the name of a field in the \`contactInfo\` object. Here, it represents any custom fields that you've chosen to implement.
     */
    customFields?: string | number | Date;
}
interface LoginOptions {
    /**
     * Whether to display the \`"login"\` or \`"signup"\` prompt.
     *
     * Defaults to \`"signup"\`.
     */
    mode?: string;
    /**
     * Whether the login form should be modal (\`true\`)
     * or full screen (\`false\`).
     *
     * Defaults to \`false\` (full screen).
     */
    modal?: boolean;
}
/**
 * An object that contains information about a site registration.
 */
interface RegistrationOptions {
    /**
     * Contact information.
     * @servicePath wix-members-frontend.Authentication.ContactInfo
     */
    contactInfo?: ContactInfo;
    /**
     * Sets the [privacy status](https://support.wix.com/en/article/member-privacy-settings-for-groups) of a new member upon registration.
     * One of:
     *
     *  - \`"PUBLIC"\`: Sets the new member status to public. A member whose status is public is a member of the site's community.
     *  - \`"PRIVATE"\`: Sets the new member status to private. A member whose status is private is not a member of the site's community.
     *
     * Defaults to \`"PRIVATE"\`.
     */
    privacyStatus?: string;
}
interface RegistrationResult {
    /**
     * Registration status.
     *
     * One of:
     *
     * - \`"PENDING"\`: The member must be approved before they can log in to the site.
     * - \`"ACTIVE"\`: The member is approved and can log in to the site.
     * @requiredField status
     */
    status: string;
    /**
     * Token for approving the member
     * with the [\`approveByToken()\`](https://dev.wix.com/docs/velo/api-reference/wix-members-backend/authentication/approve-by-token)
     * function. \`approvalToken\` is safe to pass via email or from page code to
     * backend code.
     *
     * Returned when \`status\` is \`"PENDING"\`.
     */
    approvalToken?: string;
    /**
     * The registered member.
     *
     * Returned when \`status\` is \`"ACTIVE"\`.
     * @servicePath wix-members-frontend.CurrentMember.Member
     */
    member?: Member;
}
interface SetPasswordEmailOptions {
    /**
     * Whether to hide the "ignore this email" message.
     *
     * If \`false\`, the email tells the member
     * they can safely ignore
     * if they did not request the password change.
     *
     * Defaults to \`false\`.
     */
    hideIgnoreMessage?: boolean;
}
/**
 * undefined
 * @param currentMember - Logged-in member.
 * @requiredField currentMember
 * @servicePath wix-members-frontend.CurrentMember
 */
type LoginHandler = (currentMember: CurrentMember) => void;
/**
 * undefined
 */
type LogoutHandler = () => void;
/**
 * Logs the current member into the site using the given session token.
 *
 * The \`applySessionToken()\` function returns a Promise that resolves when the
 *  given session token is applied and the current member is logged into the site.
 *
 *
 * You receive a session token from the following
 * wix-members-backend functions:
 *
 *  - [\`approveByEmail()\`](https://dev.wix.com/docs/velo/api-reference/wix-members-backend/authentication/approve-by-email)
 *  - [\`approveByToken()\`](https://dev.wix.com/docs/velo/api-reference/wix-members-backend/authentication/approve-by-token)
 *  - [\`register()\`](https://dev.wix.com/docs/velo/api-reference/wix-members-backend/authentication/register)
 *  - [\`generateSessionToken()\`](https://dev.wix.com/docs/velo/api-reference/wix-members-backend/authentication/generatesessiontoken)
 *  - [\`login()\`](https://dev.wix.com/docs/velo/api-reference/wix-members-backend/authentication/login)
 *
 *  Pass the returned session token to your page code and apply it by
 *  calling \`applySessionToken()\` to complete the process started by one of the
 *  above functions.
 * @param sessionToken - Session token to apply.
 * @requiredField sessionToken
 * @returns Fulfilled - When the token is applied.
 */
declare async function applySessionToken(sessionToken: string): Promise<void>;
/**
 * Indicates whether the site visitor is a logged-in member.
 *
 * The \`loggedIn()\` function returns a boolean value
 * indicating whether the current visitor is logged in as a site member.
 *
 * If a member is logged in, \`loggedIn()\` returns \`true\`.
 * Otherwise, \`loggedIn()\` returns \`false\`.
 *
 * @returns \`true\` if a member is logged in. Otherwise, \`false\`.
 */
declare function loggedIn(): Promise<boolean>;
/**
 * Logs a registered member in with an email and password.
 *
 * The \`login()\` function returns a Promise that resolves when the member with
 *  the specified email address and password is logged in.
 *
 *  The \`login()\` function only works with existing members. To register a new member use
 *  the [\`register()\` function](#register).
 *
 * > **Note:**
 * > - The APIs in \`wix-members-frontend\` are only partially functional when previewing your site.
 * >   View a published version of your site to see their complete functionality.
 * @param email - Login email address.
 * @requiredField email
 * @param password - Member password.
 * @requiredField password
 * @returns Fulfilled - When the member is logged in.
 * Rejected - Error message.
 */
declare async function login(email: string, password: string): Promise<void>;
/**
 * Logs the current member out of the site.
 *
 * The \`logout()\` function logs the current member out of the site.
 *
 * > **Notes:**
 * >
 * > - The APIs in \`wix-members-frontend\` are only partially functional when previewing your site.
 * >   View a published version of your site to see their complete functionality.
 * >
 * > - The APIs in \`wix-members-frontend\` can only be used once the page has loaded. Therefore,
 * >   you must use them in code that is contained in or is called from the
 * >   [onReady()](https://dev.wix.com/docs/velo/api-reference/$w/on-ready) event handler or any element event handler.
 */
declare function logout(): Promise<void>;
/**
 * Sets the function that runs when a member logs in.
 *
 * The \`onLogin()\` event handler runs when a member logs into your site.
 *
 * \`onLogin\` receives a \`currentMember\` object for the logged-in member,
 * which contains the [\`CurrentMember\` methods](members/currentmember)
 * you can use to retrieve the member's information.
 *
 * Usually, you want to call \`onLogin()\` in the **masterPage.js** file in the
 * code editor so that the \`onLogin()\` event handler runs no matter which
 * page a member uses to log in.
 *
 * > **Notes:**
 * >
 * > - The APIs in \`wix-members-frontend\` are only partially functional when previewing your site.
 * >   View a published version of your site to see their complete functionality.
 * >
 * > - The APIs in \`wix-members-frontend\` can only be used once the page has loaded. Therefore,
 * >   you must use them in code that is contained in or is called from the
 * >   [onReady()](https://dev.wix.com/docs/velo/api-reference/$w/on-ready) event handler or any element event handler.
 * @param handler - Function name or expression to run when a member logs in.
 * @requiredField handler
 * @servicePath wix-members-frontend.Authentication.LoginHandler
 */
declare function onLogin(handler: LoginHandler): Promise<void>;
/**
 * Sets the function that runs when a member logs out.
 *
 * Use the \`onLogout()\` function for code you want to run after a member logs out
 * from your site.
 *
 *  Usually, you want to call the \`onLogout()\` function in the **masterPage.js** file in the
 *  code editor so that the \`onLogout()\` event handler runs no matter which
 *  page on your site a member uses to log out.
 *
 * > **Notes:**
 * >
 * > - The APIs in \`wix-members-frontend\` are only partially functional when previewing your site.
 * >   View a published version of your site to see their complete functionality.
 * >
 * > - The APIs in \`wix-members-frontend\` can only be used once the page has loaded. Therefore,
 * >   you must use them in code that is contained in or is called from the
 * >   [onReady()](https://dev.wix.com/docs/velo/api-reference/$w/on-ready) event handler or any element event handler.
 * @param handler - Function name or expression to run when a member logs out.
 * @requiredField handler
 * @servicePath wix-members-frontend.Authentication.LogoutHandler
 */
declare function onLogout(handler: LogoutHandler): Promise<void>;
/**
 * Prompts the current site visitor with a password reset modal.
 *
 * The \`promptForgotPassword()\` function returns a Promise that resolves when
 * the visitor submits the **Create New Password** form.
 *
 * If the visitor cancels the form without submitting it,
 * the Promise is rejected.
 *
 * \`promptForgotPassword()\` cannot be called before the page is ready.
 *
 * > **Notes:**
 * >
 * > - The APIs in \`wix-members-frontend\` are only partially functional when previewing your site.
 * >   View a published version of your site to see their complete functionality.
 * >
 * > - The APIs in \`wix-members-frontend\` can only be used once the page has loaded. Therefore,
 * >   you must use them in code that is contained in or is called from the
 * >   [\`onReady()\`](https://dev.wix.com/docs/velo/api-reference/$w/on-ready) event handler or any element event handler.
 * >
 * > - If you \`return\` or \`await\` the \`promptForgotPassword()\` function
 * >   when calling from \`onReady()\`, the page will be prevented from loading.
 * >   To handle the resolved promise, use \`.then()\` and \`.catch()\`.
 *
 * @returns Fulfilled - When the form is submitted.
 * Rejected - Message that the dialog was canceled, user is already logged in, or another reason the password reset failed.
 */
declare async function promptForgotPassword(): Promise<void>;
/**
 * Prompts the current visitor to log in as a site member.
 *
 * The \`promptLogin()\` function returns a Promise that resolves
 * when the login has completed.
 *
 * If the visitor cancels the form without logging in,
 * the Promise is rejected.
 *
 * The \`promptLogin()\` function cannot be called before the page is ready.
 *
 * > **Notes:**
 * >
 * > - The APIs in \`wix-members-frontend\` are only partially functional when previewing your site.
 * >   View a published version of your site to see their complete functionality.
 * >
 * > - The APIs in \`wix-members-frontend\` can only be used once the page has loaded. Therefore,
 * >   you must use them in code that is contained in or is called from the
 * >   [\`onReady()\`](https://dev.wix.com/docs/velo/api-reference/$w/on-ready) event handler or any element event handler.
 * >
 * > - If you \`return\` or \`await\` the \`promptLogin()\` function
 * >   when calling from \`onReady()\`, the page will be prevented from loading.
 * >   To handle the resolved promise, use \`.then()\` and \`.catch()\`.
 * @param options - The options that determine how the login dialog box appears.
 * @servicePath wix-members-frontend.Authentication.LoginOptions
 * @returns Fulfilled - When the member is logged in.
 * Rejected - Message that the dialog was canceled, or any other reason the member failed to log in.
 */
declare async function promptLogin(options?: LoginOptions): Promise<void>;
/**
 * Registers a new site member.
 *
 * The \`register()\` function returns a Promise that resolves to a \`RegistrationResult\`
 *  object when the member is registered or pending registration.
 *
 *  The specified \`password\` must be between 4 and 100 ASCII characters.
 *
 *  See [New Members](https://dev.wix.com/docs/velo/api-reference/wix-members-frontend/authentication/new-members) to learn about verifying emails and approving members.
 *
 *  > **Notes:**
 *  >
 *  > - The APIs in \`wix-members-frontend\` are only partially functional when previewing your site.
 *  >   View a published version of your site to see their complete functionality.
 *  >
 *  > - The member data in the resolved Promise includes custom fields from your site's contacts
 *  >   only if [they are added to your site members in your dashboard](https://support.wix.com/en/article/customizing-your-member-profile-fields).
 *  >
 *  > - When a new member signs up using an email address
 *  >   that's already in your site's Contact List,
 *  >   a notification is displayed
 *  >   and a confirmation email is sent to the new member.
 *  >   To register a member without displaying the notification, use
 *  >   [\`register()\`](https://dev.wix.com/docs/velo/api-reference/wix-members-backend/authentication/register) from wix-members-backend
 *  >   (this does not suppress the confirmation email).
 *  >
 *  > - When your site's member signup settings are set to [automatic approval](https://dev.wix.com/docs/velo/api-reference/wix-members-frontend/authentication/new-members#automatic-approval),
 *  >   calling \`register()\` from wix-members-frontend
 *  >   (in page code) is as secure as calling
 *  >   [\`register()\`](https://dev.wix.com/docs/velo/api-reference/wix-members-backend/authentication/register) from wix-members-backend (in backend code),
 *  >   unless you are implementing [custom site registration using Velo forms](https://dev.wix.com/docs/develop-websites/articles/code-tutorials/wix-members/enabling-custom-site-registration).
 *  >   However, when registration is set to [manual approval](https://dev.wix.com/docs/velo/api-reference/wix-members-frontend/authentication/new-members#manual-approval),
 *  >   calling \`register()\` from wix-members-backend
 *  >   allows you to build more secure approval flows
 *  >   by keeping tokens hidden from the frontend.
 * @param email - Email address the new member will use to log in.
 * @requiredField email
 * @param password - Password to assign to the new member.
 * Must be 4 to 100 ASCII characters.
 * @requiredField password
 * @param options - Registration options.
 * @servicePath wix-members-frontend.Authentication.RegistrationOptions
 * @returns Fulfilled - When the member is registered.
 * Rejected - Error message.
 * @servicePath wix-members-frontend.Authentication.RegistrationResult
 */
declare async function register(email: string, password: string, options?: RegistrationOptions): Promise<RegistrationResult>;
/**
 * Sends a site member an email with a link to set their password.
 *
 * The \`sendSetPasswordEmail()\` function returns a Promise that resolves
 * when the set password link is emailed to the member.
 *
 * The set password link is valid for 3 hours,
 * and it can be used only once.
 * If the link expires, no changes are made to the password.
 * @param email - Login email of the member whose password will be set.
 * @requiredField email
 * @param options - Email display options.
 * @servicePath wix-members-frontend.Authentication.SetPasswordEmailOptions
 * @returns Fulfilled - If the email is sent.
 * Rejected - Error message.
 */
declare async function sendSetPasswordEmail(email: string, options?: SetPasswordEmailOptions): Promise<boolean>;

type authenticationSdkModuleContext_Authentication = Authentication;
type authenticationSdkModuleContext_ContactInfo = ContactInfo;
type authenticationSdkModuleContext_LoginHandler = LoginHandler;
type authenticationSdkModuleContext_LoginOptions = LoginOptions;
type authenticationSdkModuleContext_LogoutHandler = LogoutHandler;
type authenticationSdkModuleContext_RegistrationOptions = RegistrationOptions;
type authenticationSdkModuleContext_RegistrationResult = RegistrationResult;
type authenticationSdkModuleContext_SetPasswordEmailOptions = SetPasswordEmailOptions;
declare const authenticationSdkModuleContext_applySessionToken: typeof applySessionToken;
declare const authenticationSdkModuleContext_loggedIn: typeof loggedIn;
declare const authenticationSdkModuleContext_login: typeof login;
declare const authenticationSdkModuleContext_logout: typeof logout;
declare const authenticationSdkModuleContext_onLogin: typeof onLogin;
declare const authenticationSdkModuleContext_onLogout: typeof onLogout;
declare const authenticationSdkModuleContext_promptForgotPassword: typeof promptForgotPassword;
declare const authenticationSdkModuleContext_promptLogin: typeof promptLogin;
declare const authenticationSdkModuleContext_register: typeof register;
declare const authenticationSdkModuleContext_sendSetPasswordEmail: typeof sendSetPasswordEmail;
declare namespace authenticationSdkModuleContext {
  export { type authenticationSdkModuleContext_Authentication as Authentication, type authenticationSdkModuleContext_ContactInfo as ContactInfo, type authenticationSdkModuleContext_LoginHandler as LoginHandler, type authenticationSdkModuleContext_LoginOptions as LoginOptions, type authenticationSdkModuleContext_LogoutHandler as LogoutHandler, type authenticationSdkModuleContext_RegistrationOptions as RegistrationOptions, type authenticationSdkModuleContext_RegistrationResult as RegistrationResult, type authenticationSdkModuleContext_SetPasswordEmailOptions as SetPasswordEmailOptions, authenticationSdkModuleContext_applySessionToken as applySessionToken, authenticationSdkModuleContext_loggedIn as loggedIn, authenticationSdkModuleContext_login as login, authenticationSdkModuleContext_logout as logout, authenticationSdkModuleContext_onLogin as onLogin, authenticationSdkModuleContext_onLogout as onLogout, authenticationSdkModuleContext_promptForgotPassword as promptForgotPassword, authenticationSdkModuleContext_promptLogin as promptLogin, authenticationSdkModuleContext_register as register, authenticationSdkModuleContext_sendSetPasswordEmail as sendSetPasswordEmail };
}

type Methods$3<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const authenticationRuntime: Methods$3<typeof authenticationSdkModuleContext> & HostModule<Methods$3<typeof authenticationSdkModuleContext>, Host>;

type Methods$2<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const currentMemberRuntime: Methods$2<typeof currentMemberSdkModuleContext> & HostModule<Methods$2<typeof currentMemberSdkModuleContext>, Host>;

declare namespace wixSitemembers {
  export { authenticationRuntime as authentication, currentMemberRuntime as currentMember };
}

type Methods$1<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const authenticationContext: Methods$1<typeof authenticationSdkModuleContext>;

type Methods<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const currentMemberContext: Methods<typeof currentMemberSdkModuleContext>;

declare namespace wixSitemembersContext {
  export { authenticationContext as authentication, currentMemberContext as currentMember };
}

declare module "@wix/site-members" {
     export = wixSitemembers;
}
 
declare module "@wix/site-members/context" {
     export = wixSitemembersContext;
}
"
`;
