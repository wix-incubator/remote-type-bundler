diff --git a/node_modules/rollup-plugin-dts/dist/rollup-plugin-dts.cjs b/node_modules/rollup-plugin-dts/dist/rollup-plugin-dts.cjs
index 33f8905..0b64c6c 100644
--- a/node_modules/rollup-plugin-dts/dist/rollup-plugin-dts.cjs
+++ b/node_modules/rollup-plugin-dts/dist/rollup-plugin-dts.cjs
@@ -676,7 +676,7 @@ function preProcess({ sourceFile }) {
     // and collect/remove all the fileReferenceDirectives
     const fileReferences = new Set();
     for (const ref of sourceFile.referencedFiles) {
-        fileReferences.add(path__namespace.join(path__namespace.dirname(sourceFile.fileName), ref.fileName));
+        fileReferences.add(ref.fileName);
         const { line } = sourceFile.getLineAndCharacterOfPosition(ref.pos);
         const start = lineStarts[line];
         let end = sourceFile.getLineEndOfPosition(ref.pos);
@@ -1497,13 +1497,19 @@ const transform = () => {
                     typeReferences.add(ref);
                 }
                 for (const ref of allFileReferences.get(fileName.split("\\").join("/")) || []) {
-                    // Need absolute path of the target file here
-                    const chunkFolder = (options.file && path__namespace.dirname(options.file)) || (chunk.facadeModuleId && path__namespace.dirname(chunk.facadeModuleId)) || ".";
-                    let targetRelPath = path__namespace.relative(chunkFolder, ref).split("\\").join("/");
-                    if (targetRelPath[0] !== ".") {
-                        targetRelPath = "./" + targetRelPath;
+                    if (ref.startsWith('.')) {
+                        // Need absolute path of the target file here
+                        const absolutePathToOriginal = path__namespace.join(path__namespace.dirname(fileName), ref);
+                        const chunkFolder = (options.file && path__namespace.dirname(options.file)) || (chunk.facadeModuleId && path__namespace.dirname(chunk.facadeModuleId)) || ".";
+                        let targetRelPath = path__namespace.relative(chunkFolder, absolutePathToOriginal).split("\\").join("/");
+                        if (targetRelPath[0] !== ".") {
+                            targetRelPath = "./" + targetRelPath;
+                        }
+                        fileReferences.add(targetRelPath);
+                    }
+                    else {
+                        fileReferences.add(ref);
                     }
-                    fileReferences.add(targetRelPath);
                 }
             }
             code = writeBlock(Array.from(fileReferences, (ref) => `/// <reference path="${ref}" />`));
diff --git a/node_modules/rollup-plugin-dts/dist/rollup-plugin-dts.mjs b/node_modules/rollup-plugin-dts/dist/rollup-plugin-dts.mjs
index 4ebaf65..ed73e75 100644
--- a/node_modules/rollup-plugin-dts/dist/rollup-plugin-dts.mjs
+++ b/node_modules/rollup-plugin-dts/dist/rollup-plugin-dts.mjs
@@ -648,7 +648,7 @@ function preProcess({ sourceFile }) {
     // and collect/remove all the fileReferenceDirectives
     const fileReferences = new Set();
     for (const ref of sourceFile.referencedFiles) {
-        fileReferences.add(path.join(path.dirname(sourceFile.fileName), ref.fileName));
+        fileReferences.add(ref.fileName);
         const { line } = sourceFile.getLineAndCharacterOfPosition(ref.pos);
         const start = lineStarts[line];
         let end = sourceFile.getLineEndOfPosition(ref.pos);
@@ -1469,13 +1469,19 @@ const transform = () => {
                     typeReferences.add(ref);
                 }
                 for (const ref of allFileReferences.get(fileName.split("\\").join("/")) || []) {
-                    // Need absolute path of the target file here
-                    const chunkFolder = (options.file && path.dirname(options.file)) || (chunk.facadeModuleId && path.dirname(chunk.facadeModuleId)) || ".";
-                    let targetRelPath = path.relative(chunkFolder, ref).split("\\").join("/");
-                    if (targetRelPath[0] !== ".") {
-                        targetRelPath = "./" + targetRelPath;
+                    if (ref.startsWith('.')) {
+                        // Need absolute path of the target file here
+                        const absolutePathToOriginal = path.join(path.dirname(fileName), ref);
+                        const chunkFolder = (options.file && path.dirname(options.file)) || (chunk.facadeModuleId && path.dirname(chunk.facadeModuleId)) || ".";
+                        let targetRelPath = path.relative(chunkFolder, absolutePathToOriginal).split("\\").join("/");
+                        if (targetRelPath[0] !== ".") {
+                            targetRelPath = "./" + targetRelPath;
+                        }
+                        fileReferences.add(targetRelPath);
+                    }
+                    else {
+                        fileReferences.add(ref);
                     }
-                    fileReferences.add(targetRelPath);
                 }
             }
             code = writeBlock(Array.from(fileReferences, (ref) => `/// <reference path="${ref}" />`));
